{"version":3,"sources":["Component/SnakeGame/Snake/Snake.js","Component/SnakeGame/Food/Food.js","sounds/preview.wav","sounds/eat_success.wav","sounds/game_over.wav","Component/SnakeGame/index.js","App.js","reportWebVitals.js","index.js"],"names":["Snake","props","snakeDots","map","dot","i","style","left","top","className","Food","getRandomCoordinates","Math","floor","random","SnakeGame","useState","setReset","useSound","backgroundMusique","play","eatSuccess","onEatSuccess","game_over","gameOver","startMusic","setStartMusic","gameOverEffect","setGameOverEffect","food","setFood","speed","direction","setDirection","setSnakeDots","pause","setPause","useEffect","checkIfEat","music","lunchMusic","setInterval","clearInterval","checkIfOutOfBorders","checkIfCollapsed","setTimeout","moveSnake","onKeyDown","e","window","event","keyCode","console","log","includes","document","addEventListener","removeEventListener","useCallback","eaten","dots","head","length","push","shift","onGameOver","snake","pop","forEach","handleGameOverEffect","onClick","p","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c3f72e1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Snake = (props) => {\n\n  return (\n      <div>\n          {props.snakeDots.map((dot,i) => {\n              const style = {\n                  left: `${dot[0]}%`,\n                  top: `${dot[1]}%`,\n              }\n              return <div className=\"snake-dot\" key={i} style={style}></div>\n          })}\n      </div>\n  )\n};\n\nexport default Snake;","import React from \"react\";\n\nconst Food = ({ dot }) => {\n  const style = {\n    left: `${dot[0]}%`,\n    top: `${dot[1]}%`,\n  };\n\n  return <div className=\"snake-food\" style={style}></div>;\n};\n\nexport default Food;\n","export default __webpack_public_path__ + \"static/media/preview.e8c6c391.wav\";","export default __webpack_public_path__ + \"static/media/eat_success.e0a5f755.wav\";","export default __webpack_public_path__ + \"static/media/game_over.0242c96f.wav\";","import React, { useCallback, useEffect, useState } from 'react';\nimport Snake from './Snake/Snake';\nimport Food from './Food/Food';\nimport useSound from 'use-sound';\nimport backgroundMusique from '../../sounds/preview.wav';\nimport eatSuccess from '../../sounds/eat_success.wav';\nimport game_over from '../../sounds/game_over.wav';\n\nimport './snake.css';\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst SnakeGame = () => {\n  const [reset, setReset] = useState(true);\n  // MUSIC STATE\n  const [play] = useSound(backgroundMusique);\n  const [onEatSuccess] = useSound(eatSuccess);\n  const [gameOver] = useSound(game_over);\n\n  const [startMusic, setStartMusic] = useState(false);\n  const [gameOverEffect, setGameOverEffect] = useState(false);\n\n  const [food, setFood] = useState(getRandomCoordinates);\n  const [speed, setSpeed] = useState(200);\n  const [direction, setDirection] = useState('RIGHT');\n  const [snakeDots, setSnakeDots] = useState([\n    [0, 0],\n    [2, 0],\n  ]);\n  const [pause, setPause] = useState(true);\n\n  // console.log('direction', direction);\n  // useEffect(() => {\n  //   if (direction === null) {\n  //     setPause(true);\n  //     setSnakeDots([\n  //       [0, 0],\n  //       [2, 0],\n  //     ]);\n  //   }\n  // }, [direction]);\n\n  // MUSIC FCT\n  useEffect(() => {\n    !!checkIfEat() && onEatSuccess();\n    const music = startMusic && play();\n    let lunchMusic = setInterval(music, 1000);\n    return () => clearInterval(lunchMusic);\n  });\n\n  useEffect(() => {\n    if (pause) {\n      setStartMusic(false);\n      return;\n    }\n    checkIfOutOfBorders();\n    checkIfCollapsed();\n    setTimeout(() => moveSnake(snakeDots, checkIfEat()), speed);\n  }, [snakeDots, pause]);\n\n  useEffect(() => {\n    // document.onkeydown = onKeyDown;\n    const onKeyDown = (e) => {\n      e = e || window.event;\n      switch (e.keyCode) {\n        case 38:\n          console.log('direction', direction);\n          !['DOWN', 'UP'].includes(direction) && setDirection('UP');\n          break;\n        case 40:\n          !['DOWN', 'UP'].includes(direction) && setDirection('DOWN');\n          break;\n        case 37:\n          !['LEFT', 'RIGHT'].includes(direction) && setDirection('LEFT');\n          break;\n        case 39:\n          !['LEFT', 'RIGHT'].includes(direction) && setDirection('RIGHT');\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', onKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', onKeyDown);\n      console.log('direction return', direction); // useEffect precedente\n    };\n  }, [direction, setDirection]);\n\n  const moveSnake = useCallback(\n    (snakeDots, eaten) => {\n      setStartMusic(true);\n      let dots = [...snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (direction) {\n        case 'RIGHT':\n          head = [head[0] + 2, head[1]];\n          break;\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          break;\n        case 'DOWN':\n          head = [head[0], head[1] + 2];\n          break;\n        case 'UP':\n          head = [head[0], head[1] - 2];\n          break;\n\n        default:\n          break;\n      }\n      if (direction) {\n        dots.push(head);\n\n        eaten ? setFood(getRandomCoordinates()) : dots.shift();\n\n        setSnakeDots([...dots]);\n      }\n    },\n    [direction],\n  );\n\n  const checkIfOutOfBorders = () => {\n    let head = snakeDots[snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      onGameOver();\n    }\n  };\n\n  const checkIfCollapsed = () => {\n    let snake = [...snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach((dot) => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        onGameOver();\n      }\n    });\n  };\n\n  const checkIfEat = () => {\n    let head = snakeDots[snakeDots.length - 1];\n    return head[0] === food[0] && head[1] === food[1];\n  };\n\n  const onGameOver = () => {\n    handleGameOverEffect();\n    setSnakeDots([\n      [0, 0],\n      [2, 0],\n    ]);\n    setDirection(null);\n    setReset(false);\n  };\n\n  const handleGameOverEffect = () => {\n    setGameOverEffect(true);\n\n    setTimeout(() => {\n      setGameOverEffect(false);\n      // setPause(true);\n    }, 1000);\n    gameOver();\n  };\n\n  return (\n    <>\n      <div className=\"game-area\">\n        <div className={`${gameOverEffect && 'game-over'}`}></div>\n        <Snake snakeDots={snakeDots} />\n        <Food dot={food} />\n      </div>\n      <div className=\"btn\">\n        <button onClick={() => setPause((p) => !p)}>\n          {pause ? 'Play' : 'Pause'}\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default SnakeGame;\n","import React from 'react';\n\nimport './App.css';\nimport SnakeGame from './Component/SnakeGame';\n\nconst App = () => <SnakeGame />\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}